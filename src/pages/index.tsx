import Head from "next/head";
import { Button, Field, Flex, Input, NativeSelect } from "@chakra-ui/react";
import { useForm } from "react-hook-form";
import wretch from "wretch";
import { toaster } from "@/components/ui/toaster";
import { countries } from "@/assets/countries";
import { valibotResolver } from "@hookform/resolvers/valibot";
import { formSchema } from "./api/[[...route]]";

interface IFormValues {
  name: string;
  surname: string;
  email: string;
  password: string;
  age: number;
  country: string;
  gender: string;
}

export default function Home() {
  const {
    register,
    formState: { errors },
    reset,
    handleSubmit,
  } = useForm<IFormValues>({
    defaultValues: {
      name: "",
      surname: "",
      email: "",
      password: "",
      age: 0,
      country: "PL",
      gender: "",
    },
  });

  const onSubmit = (data: IFormValues) => {
    wretch()
      .url("/api/form/submit")
      .post(data)
      .json<{ msg: string }>()
      .then((response) => {
        toaster.create({
          title: "Success",
          description: response.msg,
          type: "success",
        });
      })
      .catch((error) => {
        const errorMessage = error instanceof Error ? error.message : error;

        toaster.create({
          title: "Error",
          description: errorMessage,
          type: "error",
        });
      });
  };

  return (
    <>
      <Head>
        <title>PushPushGo - frontend recruitment 2025</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <form onSubmit={handleSubmit(onSubmit)}>
        <Flex flexDirection="column" maxW="1440px" mx="auto">
          <Field.Root invalid={!!errors.name}>
            <Field.Label>First name</Field.Label>
            <Input {...register("name")} />
            <Field.ErrorText>{errors.name?.message}</Field.ErrorText>
          </Field.Root>

          <Field.Root invalid={!!errors.surname}>
            <Field.Label>Last name</Field.Label>
            <Input {...register("surname")} />
            <Field.ErrorText>{errors.surname?.message}</Field.ErrorText>
          </Field.Root>

          <Field.Root invalid={!!errors.email}>
            <Field.Label>Email</Field.Label>
            <Input {...register("email")}/>
            <Field.ErrorText>{errors.email?.message}</Field.ErrorText>
          </Field.Root>

          <Field.Root invalid={!!errors.password}>
            <Field.Label>Password</Field.Label>
            <Input {...register("password")}/>
            <Field.ErrorText>{errors.password?.message}</Field.ErrorText>
          </Field.Root>

          <Field.Root invalid={!!errors.age}>
            <Field.Label>Age</Field.Label>
            <Input {...register("age")}/>
            <Field.ErrorText>{errors.age?.message}</Field.ErrorText>
          </Field.Root>

          <Field.Root invalid={!!errors.country}>
            <Field.Label>Country</Field.Label>
            <NativeSelect.Root size="sm" width="240px">
              <NativeSelect.Field
                placeholder="Select option"
                {...register("country")}
              >
                {countries.map((c) => (
                  <option key={c} value={c}>
                    {c.toLowerCase()}
                  </option>
                ))}
              </NativeSelect.Field>
              <NativeSelect.Indicator />
            </NativeSelect.Root>
            <Field.ErrorText>{errors.country?.message}</Field.ErrorText>
          </Field.Root>

          <Field.Root invalid={!!errors.gender}>
            <Field.Label>Gender</Field.Label>
            <Input {...register("gender")} />
            <Field.ErrorText>{errors.gender?.message}</Field.ErrorText>
          </Field.Root>

          <Flex gap={2}>
            <Button onClick={() => reset()}>Reset</Button>

            <Button type="submit">Send</Button>
          </Flex>
        </Flex>
      </form>
    </>
  );
}
